@using Resources
@using DataService
@using DataService.DTO
@using LogLigFront.Controllers
@using DataService.Utils
@using LogLigFront.Helpers
@using System.Data.SqlTypes;
@using System.Configuration

@model CompetitionSchedulesDto
@{
    var GroupIndex = -1;
    var BracketWinnerDivPrefix = "bracket_winner_div_";
    var BracketLoserDivPrefix = "bracket_loser_div_";
    var rounds = 1;
    List<CompetitionStageBracketsDto> stBracketsData = new List<CompetitionStageBracketsDto>();
}
<style>
    .losers {
        transform: rotateY(180deg);
    }

        .losers .team {
            transform: rotateY(180deg);
        }

        .losers .brackets-header .title {
            transform: rotateY(180deg);
        }

        .losers .round.rd-1 {
            display: none;
        }

        .losers .round.rd-0-1 {
            display: none;
        }

        .losers .round.rd-1-1 {
            display: none;
        }

        .losers .round.rd-3-1 {
            display: none;
        }

    .row-like {
        display: table;
        width: 100%;
        table-layout: fixed;
        border-spacing: 10px;
    }

    .column-like {
        display: table-cell;
    }

    .ranking {
        display: none;
    }
</style>
<a href="#" id="print" class="btn btn-info remove_print float-last">
    <i class="glyphicon glyphicon-print"></i>&nbsp @Messages.Print
</a>

<h3 class="main-title">
    @if (ViewBag.Logo != null && !string.IsNullOrEmpty(ViewBag.Logo))
    {
        <img src="@ViewBag.Logo" class="img-circle logo" alt="" />
    }
    @ViewBag.ResTitle - @Messages.ScheduleResults
</h3>

@foreach (var group in Model.BracketData)
{
    GroupIndex++;
    string BracketWinnerDivId = $"{BracketWinnerDivPrefix}{group.GroupName}".Replace(' ', '_').Replace("'", "");
    string BracketLoserDivId = $"{BracketLoserDivPrefix}{group.GroupName}".Replace(' ', '_').Replace("'", "");
    var bracketItems = Model.BracketData?.Where(r => (r.GameTypeId == GameTypeId.Playoff) && r.GroupName.Equals(group.GroupName))
            ?.Where(r => r.Stages.Any(s => s.Items.Count == 8))?.FirstOrDefault()?.Stages[1]?.Items;

    if (Model.BracketData.Count() > 1 && (group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout || group.GameTypeId == GameTypeId.Knockout34 || group.GameTypeId == GameTypeId.Knockout34Consolences1Round || group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound))
    {
        <h4 style="margin-bottom:0px;">@group.GroupName</h4>
    }
    else
    {
        <div></div>
    }

    var margin_right = group.Stages.Count() * -100;

    <div class="container-fluid" style="margin-left:650px;direction: rtl;">
        <div class="row" style="margin-right:@(margin_right)px;display:inline-flex;">
            <div style="display:inline-block" id="@BracketWinnerDivId"></div>
            <div style="display:inline-block" class="losers" id='@BracketLoserDivId'></div>
        </div>
        @if (bracketItems != null)
        {
            <div class="row-like">
                <div class="column-like" id="bracket_winner_div_Test_group">
                    <div class="brackets-header">
                        <div class="title" style="width:120px;">@bracketItems[5].MinPlayoffPos - @bracketItems[5].MaxPlayoffPos</div>
                    </div>
                    <div class="container-brackets-0">
                        <div style="width:120px;" class="round rd-1">
                            <div class="match">
                                <div data-index="@bracketItems[5].MaxPlayoffPos"
                                     class="team @(bracketItems[5].WinnerId == bracketItems[5].FirstPlayerId ? "winner" : string.Empty)
                                    team-@bracketItems[5].FirstPlayerId" data-id="@bracketItems[5].FirstPlayerId">
                                    <label class="teamname">@bracketItems[5].FirstPlayer</label>
                                    <label class="score">@bracketItems[5].FirstPlayerScore</label>
                                </div>
                                <div data-index="@bracketItems[5].MinPlayoffPos"
                                     class="team @(bracketItems[5].WinnerId == bracketItems[5].SecondPlayerId ? "winner" : string.Empty)
                                     team-@bracketItems[5].SecondPlayerId" data-id="@bracketItems[5].SecondPlayerId">
                                    <label class="teamname">@bracketItems[5].SecondPlayer</label>
                                    <label class="score">@bracketItems[5].SecondPlayerScore</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column-like"></div>
                <div class="column-like" id="bracket_winner_div_Test_group">
                    <div class="brackets-header">
                        <div class="title" style="width:120px;">@bracketItems[6].MinPlayoffPos - @bracketItems[6].MaxPlayoffPos</div>
                    </div>
                    <div class="container-brackets-0">
                        <div style="width:120px;" class="round rd-1">
                            <div class="match">
                                <div data-index="@bracketItems[6].MaxPlayoffPos"
                                     class="team @(bracketItems[6].WinnerId == bracketItems[6].FirstPlayerId ? "winner" : string.Empty)
                                     team-@bracketItems[6].FirstPlayerId" data-id="@bracketItems[6].FirstPlayerId">
                                    <label class="teamname">@bracketItems[6].FirstPlayer</label>
                                    <label class="score">@bracketItems[6].FirstPlayerScore</label>
                                </div>
                                <div data-index="@bracketItems[6].MinPlayoffPos"
                                     class="team @(bracketItems[6].WinnerId == bracketItems[6].SecondPlayerId ? "winner" : string.Empty)
                                 team-@bracketItems[6].SecondPlayerId" data-id="@bracketItems[6].SecondPlayerId">
                                    <label class="teamname">@bracketItems[6].SecondPlayer</label>
                                    <label class="score">@bracketItems[6].SecondPlayerScore</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (group.GameTypeId == GameTypeId.Knockout34 || group.GameTypeId == GameTypeId.Knockout34Consolences1Round || group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound)
        {
            TennisGameCycleCompetitionDto bracket34 = null;
            foreach (var bracket in Model.BracketData)
            {
                foreach (var stage in bracket.Stages)
                {
                    foreach (var item in stage.Items)
                    {
                        if (item.MaxPlayoffPos == 3 && item.MinPlayoffPos == 4)
                        {
                            bracket34 = item;
                            break;
                        }
                    }
                }
            }
            <div class="row-like">
                <div class="column-like" id="bracket_winner_div_Test_group">
                    <div class="brackets-header">
                        <div class="title" style="width:120px;">@bracket34.MinPlayoffPos - @bracket34.MaxPlayoffPos</div>
                    </div>
                    <div class="container-brackets-0">
                        <div style="width:120px;" class="round rd-1">
                            <div class="match">
                                <div data-index="@bracket34.MaxPlayoffPos"
                                     class="team @(bracket34.WinnerId == bracket34.FirstPlayerId ? "winner" : string.Empty)
                                    team-@bracket34.FirstPlayerId" data-id="@bracket34.FirstPlayerId">
                                    <label class="teamname">@bracket34.FirstPlayer</label>
                                    <label class="score">@(bracket34.FirstPlayerScore != null && bracket34.FirstPlayerScore > -1 ? bracket34.FirstPlayerScore.ToString() : "-")</label>
                                </div>
                                <div data-index="@bracket34.MinPlayoffPos"
                                     class="team @(bracket34.WinnerId == bracket34.SecondPlayerId ? "winner" : string.Empty)
                                     team-@bracket34.SecondPlayerId" data-id="@bracket34.SecondPlayerId">
                                    <label class="teamname">@bracket34.SecondPlayer</label>
                                    <label class="score">@(bracket34.SecondPlayerScore != null && bracket34.SecondPlayerScore > -1 ? bracket34.SecondPlayerScore.ToString() : "-")</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column-like"></div>
                <div class="column-like"></div>
            </div>
        }
    </div>



    <style>
        #@BracketLoserDivId > div.brackets-header > div:nth-child(1) {
            margin-left: 65px;
        }
    </style>



    var stgIndex = 1;
    var currentSwapIndex = 1;
    var currentRound = 1;
    bool isMonthSet = false;
    var firstPlayerId = group.Stages.First().Items.First().FirstPlayerId;
    rounds = group.Stages.First().Items.Count(x => x.SecondPlayerId == firstPlayerId || x.FirstPlayerId == firstPlayerId);
    //  Brackets are shown only for Knockout games in NetBall (CatchBall) section
    //  and for both Knockout and Playoff games in all other sections
    //if (Model.gameAlias != GamesAlias.NetBall || group.GameTypeId == GameTypeId.Knockout)
    //{
    stBracketsData.Add(new CompetitionStageBracketsDto
    {
        elementWinnerId = BracketWinnerDivId,
        elementLoserId = BracketLoserDivId,
        rounds = rounds,
        stages = group.Stages
    });
    @* } *@
    foreach (var stage in group.Stages)
    {
        var stageIndex = group.Stages.IndexOf(stage);
        string maxMinStr = null;

        var stageFirst = stage.Items.FirstOrDefault();
        if (stageFirst != null && stageFirst.MaxPlayoffPos != null && stageFirst.MinPlayoffPos != null)
        {
            maxMinStr = $"({stageFirst.MinPlayoffPos} - {stageFirst.MaxPlayoffPos})";
        }

        var tableId = $"group_{GroupIndex}_table_{stageIndex}";
        <!--    if ((group.GameTypeId == GameTypeId.Playoff && stageIndex == 0) || group.GameTypeId == GameTypeId.Knockout)
          {
               <div class="btn-group no-print" role="group">
                   <button type="button" class="btn btn-default" onclick="schedulesCtrl.toggleBracketList(this,'@tableId')">Hide List</button>
               </div>
           }   -->
        if (stageIndex == 0 || group.GameTypeId != GameTypeId.Playoff && group.GameTypeId != GameTypeId.Knockout34Consolences1Round && group.GameTypeId != GameTypeId.Knockout34ConsolencesQuarterRound)
        {
            <h4 style="border-bottom: 1px solid #e5e6e7; margin-top: 0px; margin-bottom:5px; font-size:14px;">
                Stage @(stageIndex + 1)  <br />  @maxMinStr
            </h4>
        }
        <div id="@tableId">
            <table class="table res-table">
                <tbody>
                    @{
                        GenerateTeamNumbers teamNumbers = null;
                        var maxItemsForThisStage = 0;
                        var maxSwapIndex = 0;
                        var itmCount = 0;
                        if (stage != group.Stages[0] && (group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout34Consolences1Round))
                        {
                            teamNumbers = new GenerateTeamNumbers(group.Stages[0].Items.Count * 2, rounds);
                            maxItemsForThisStage = teamNumbers.GetStageTotalMatchesPerRow(stgIndex);
                            itmCount = maxItemsForThisStage;
                            maxSwapIndex = teamNumbers.MaxSwapIndexForStage(stgIndex);
                        }
                        int? minPos = 2;
                        int? maxPos = 1;
                        if (group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound)
                        {
                            itmCount = stage.Items.Count();
                        }
                    }
                    @if (Model.NeedShowCycles)
                    {
                        foreach (var gamesInRound in stage.Items.GroupBy(t => t.RoundNum))
                        {
                            var cycleNum = 0;
                            var differences = new Dictionary<int?, int>();
                            if (Model.RoundStartCycle == RoundStartCycle.StartEachRoundFromCycleOne)
                            {
                                var min = gamesInRound.First().CycleNum ?? 0;
                                foreach (var game in gamesInRound)
                                {
                                    if (!differences.ContainsKey(game.GroupId))
                                    {
                                        differences.Add(game.GroupId, game.CycleNum ?? 0 - min);
                                    }

                                    game.CycleNum -= differences[game.GroupId];
                                }
                            }
                            foreach (var games in gamesInRound.GroupBy(t => t.CycleNum))
                            {
                                cycleNum++;
                                if (games.All(g => g.IsDivision))
                                {
                                    if (Model.RoundStartCycle == RoundStartCycle.StartEachRoundFromCycleOne)
                                    {
                                        <tr style="background:none"><td colspan="5">@Resources.Messages.Cycle @cycleNum</td></tr>
                                    }
                                    else
                                    {
                                        <tr style="background:none"><td colspan="5">@Resources.Messages.Cycle @(games.Key + 1)</td></tr>
                                    }
                                }
                                var lastDisplayedStageIndex = -1;

                                var gamesInProperOrder = games.OrderBy(gm => gm.GroupId).ThenBy(gm => gm.StartDate).ToList();

                                foreach (var m in gamesInProperOrder)
                                {
                                    if ((group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout34Consolences1Round || group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound) && stageIndex > 0)
                                    {
                                        if (itmCount == maxItemsForThisStage || ((group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound || group.GameTypeId == GameTypeId.Knockout34Consolences1Round) && (minPos != m.MinPlayoffPos || maxPos != m.MaxPlayoffPos)))
                                        {
                                            minPos = m.MinPlayoffPos;
                                            maxPos = m.MaxPlayoffPos;
                                            <tr style="border-bottom: 1px solid rgb(229, 230, 231); background: none;">
                                                <td style="padding: 0;" colspan="5">
                                                    <h4 style="margin-bottom:0px;">

                                                        @if (currentSwapIndex == 1)
                                                        {
                                                            var id = "hide" + stageIndex + "r_" + currentRound;
                                                            <!--   <span id="@id" class="btn-group no-print" role="group">
                                                                <button type="button" class="btn btn-default" onclick="schedulesCtrl.toggleBracketList(this,'@id',true)">Hide List</button>
                                                            </span> <br />  -->
                                                            if (rounds > 1)
                                                            {
                                                                <text>@($"Stage {stgIndex + 1} Round {currentRound}")</text>
                                                            }
                                                            else if (group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound || group.GameTypeId == GameTypeId.Knockout34Consolences1Round)
                                                            {
                                                                if (lastDisplayedStageIndex != stageIndex + 1)
                                                                {
                                                                    lastDisplayedStageIndex = stageIndex + 1;
                                                                    <text>@(UIHelpers.GetStageName(stageIndex, group.Stages.Count())) </text>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <text>@($"Stage {stgIndex + 1}") </text>
                                                            }
                                                            <br />

                                                        }
                                                        @if (teamNumbers != null && group.GameTypeId == GameTypeId.Playoff)
                                                        {
                                                            <text>(@teamNumbers.PrintTeamIndex(stgIndex - 1, currentSwapIndex - 1))</text>
                                                        }
                                                        <span style="direction:ltr;">
                                                            @if (group.GameTypeId == GameTypeId.Knockout34Consolences1Round || group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound)
                                                            {
                                                                @($"({m.MinPlayoffPos} - {m.MaxPlayoffPos})")
                                                            }
                                                        </span>
                                                    </h4>

                                                </td>
                                                <td title="" style="padding: 0;">
                                                    <h4>&nbsp</h4>
                                                </td>
                                                <td title="Event date" style="padding: 0;">
                                                    <h4>&nbsp</h4>
                                                </td>
                                                <td class="text-center text-success" colspan="7" style="padding: 0;">
                                                    <h4>&nbsp</h4>
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                        if (itmCount > 0)
                                        {
                                            itmCount--;
                                        }

                                    }

                                    //@m.MinPlayoffPos <br>@m.MaxPlayoffPos;
                                    string elId = null;
                                    if (m.StartDate.Month == DateTime.Now.Month && m.StartDate.Year == DateTime.Now.Year && !isMonthSet)
                                    {
                                        isMonthSet = true;
                                        elId = "closemonth";
                                    }
                                    if (m.IsPublished)
                                    {
                                        <tr id="@elId" @if (itmCount == 0 && stageIndex > 0) { <text> style="margin-bottom: 100px;" </text> }>
                                            <td class="res-stat remove_print" style="width: 70px;">
                                                @if (m.GameStatus == GameStatus.Started)
                                                {
                                                    <span class="label label-success">@Messages.Started</span>
                                                }
                                                else if (m.GameStatus == GameStatus.Ended)
                                                {
                                                    <span class="label label-danger">@Messages.Ended</span>
                                                }
                                                else
                                                {
                                                    <span class="label label-default">@Messages.Waiting</span>
                                                }
                                            </td>
                                            <td title="@m.AuditoriumAddress">
                                                @if (string.IsNullOrEmpty(m.Auditorium))
                                                {
                                                    @m.Auditorium
                                                }
                                                else
                                                {
                                                    @Html.ActionLink(m.Auditorium ?? "", "AuditoriumSchedules", "LeagueTable", new { id = m.AuditoriumId, seasonId = ViewBag.SeasonId }, new { @class = "btn-arena", target = "_blank" })
                                                }
                                            </td>
                                            <td>@m.GroupName</td>
                                            <td style="direction:ltr;">@m.MaxPlayoffPos - @m.MinPlayoffPos</td>
                                            @if (Model.GameCycles?.Any(t => t.RoundNum.HasValue && t.RoundNum > 1) == true)
                                            {
                                                <td>
                                                    <text>@($"סיבוב {m.RoundNum}")</text>
                                                </td>
                                            }
                                            <td>@((m.IsNotSetYet || m.StartDate == SqlDateTime.MinValue.Value) ? Messages.IsNotSetYet : m.StartDate.ToString("dd/MM/yyyy HH:mm"))</td>
                                            <td>@m.TimeInitial</td>
                                            <td class="text-center">
                                                @ShowImage(m.FirstPlayerImage)
                                            </td>
                                            <td class="text-center main-title">
                                                @if (m.IsFirstPlayerKnown)
                                                {
                                                    <h4>
                                                        @m.FirstPlayer
                                                    </h4>
                                                }
                                                else if (m.IsRoot || !String.IsNullOrEmpty(m.FirstPlayer))
                                                {
                                                    <h4>
                                                        @(@m.FirstPlayer)
                                                    </h4>
                                                }
                                                else
                                                {
                                                    if (m.Bracket != null)
                                                    {
                                                        @*TODO: change this logic according to the changes*@
                                                        @*<a href="@Url.Action("PotentialTeams", "LeagueTable", new {id = m.Bracket.Id, index = m.IndexInBracket % 2 == 0 ? 1 : 2})"
                                                            data-target="#barcket-potential-teams"
                                                            data-toggle="modal"
                                                            class="main-title">@m.HomeTeam</a>*@
                                                    }
                                                }
                                            </td>
                                            <td class="text-center result">
                                                @m.FirstPlayerScore
                                            </td>
                                            <td class="text-center result">
                                                @m.SecondPlayerScore
                                            </td>
                                            <td class="text-center main-title">
                                                @if (m.IsSecondPlayerKnown)
                                                {
                                                    <h4>
                                                        @m.SecondPlayer
                                                    </h4>
                                                }
                                                else if (m.IsRoot || !String.IsNullOrEmpty(m.SecondPlayer))
                                                {
                                                    <h4>
                                                        @(@m.SecondPlayer)
                                                    </h4>
                                                }
                                                else
                                                {
                                                    @*TODO: change this logic according to the changes*@
                                                    @*if (m.Bracket != null)
                                                        {
                                                            <a href="@Url.Action("PotentialTeams", "LeagueTable", new {id = m.Bracket.Id, index = m.IndexInBracket % 2 == 0 ? 2 : 1})"
                                                               data-target="#barcket-potential-teams"
                                                               data-toggle="modal"
                                                               class="main-title">@m.GuestTeam</a>
                                                        }*@
                                                }
                                            </td>
                                            <td class="text-center">
                                                @ShowImage(m.SecondPlayerImage)
                                            </td>
                                            <td class="text-left">
                                                <a href="@Url.Action("CompetitionGameSets", new { id = m.CycleId })" class="btn btn-danger main-btn" data-target="#resbox" data-toggle="modal">@Messages.ToGame</a>
                                            </td>
                                        </tr>
                                    }
                                    if ((group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout34Consolences1Round) && stageIndex > 0 && itmCount == 0)
                                    {
                                        if (currentSwapIndex == maxSwapIndex)
                                        {
                                            if (currentRound == rounds)
                                            {
                                                stgIndex++;
                                                currentRound = 1;
                                            }
                                            else
                                            {
                                                currentRound++;
                                            }

                                            maxItemsForThisStage = teamNumbers.GetStageTotalMatchesPerRow(stgIndex);
                                            maxSwapIndex = teamNumbers.MaxSwapIndexForStage(stgIndex);
                                            currentSwapIndex = 1;
                                        }
                                        else if (currentSwapIndex < maxSwapIndex)
                                        {
                                            currentSwapIndex++;
                                        }
                                        itmCount = maxItemsForThisStage;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var m in stage.Items.OrderBy(c => c.StartDate))
                        {
                            if (group.GameTypeId == GameTypeId.Playoff && stageIndex > 0)
                            {
                                if (itmCount == maxItemsForThisStage)
                                {
                                    <tr style="border-bottom: 1px solid rgb(229, 230, 231); background: none;">
                                        <td style="padding: 0;">
                                            <h4 style="margin-bottom:0px;">



                                                @if (currentSwapIndex == 1)
                                                {
                                                    var id = "hide" + stageIndex + "r_" + currentRound;
                                                    <!--   <span id="@id" class="btn-group no-print" role="group">
                                                        <button type="button" class="btn btn-default" onclick="schedulesCtrl.toggleBracketList(this,'@id',true)">Hide List</button>
                                                    </span> <br />  -->
                                                    if (rounds > 1)
                                                    {
                                                        <text>@($"Stage {stgIndex + 1} Round {currentRound}")</text>
                                                    }
                                                    else
                                                    {
                                                        <text>@($"Stage {stgIndex + 1}") </text>
                                                    }
                                                    <br />
                                                }
                                                @if (teamNumbers != null && (group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout34Consolences1Round || group.GameTypeId == GameTypeId.Knockout34ConsolencesQuarterRound))
                                                {
                                                    <text>(@teamNumbers.PrintTeamIndex(stgIndex - 1, currentSwapIndex - 1))</text>
                                                }
                                            </h4>

                                        </td>
                                        <td title="" style="padding: 0;">
                                            <h4>&nbsp</h4>
                                        </td>
                                        <td title="Event date" style="padding: 0;">
                                            <h4>&nbsp</h4>
                                        </td>
                                        <td class="text-center text-success" colspan="7" style="padding: 0;">
                                            <h4>&nbsp</h4>
                                        </td>
                                        <td></td>
                                    </tr>
                                }
                                if (itmCount > 0)
                                {
                                    itmCount--;
                                }

                            }

                            //@m.MinPlayoffPos <br>@m.MaxPlayoffPos;
                            string elId = null;
                            if (m.StartDate.Month == DateTime.Now.Month && m.StartDate.Year == DateTime.Now.Year && !isMonthSet)
                            {
                                isMonthSet = true;
                                elId = "closemonth";
                            }
                            if (m.IsPublished)
                            {
                                <tr id="@elId" @if (itmCount == 0 && stageIndex > 0) { <text> style="margin-bottom: 100px;" </text> }>
                                    <td class="res-stat remove_print" style="width: 70px;">
                                        @if (m.GameStatus == GameStatus.Started)
                                        {
                                            <span class="label label-success">@Messages.Started</span>
                                        }
                                        else if (m.GameStatus == GameStatus.Ended)
                                        {
                                            <span class="label label-danger">@Messages.Ended</span>
                                        }
                                        else
                                        {
                                            <span class="label label-default">@Messages.Waiting</span>
                                        }
                                    </td>
                                    <td title="@m.AuditoriumAddress">
                                        @if (string.IsNullOrEmpty(m.Auditorium))
                                        {
                                            @m.Auditorium
                                        }
                                        else
                                        {
                                            @Html.ActionLink(m.Auditorium ?? "", "AuditoriumSchedules", "LeagueTable", new { id = m.AuditoriumId, seasonId = ViewBag.SeasonId }, new { @class = "btn-arena", target = "_blank" })
                                        }
                                    </td>
                                    <td>@m.GroupName</td>
                                    @if (Model.GameCycles?.Any(t => t.RoundNum.HasValue && t.RoundNum > 1) == true)
                                    {
                                        <td>
                                            <text>@($"סיבוב {m.RoundNum}")</text>
                                        </td>
                                    }
                                    <td>@(m.IsNotSetYet ? Messages.IsNotSetYet : m.StartDate.ToString("dd/MM/yyyy HH:mm"))</td>
                                    <td>@m.TimeInitial</td>
                                    <td class="text-center">
                                        @ShowImage(m.FirstPlayerImage)
                                    </td>
                                    <td class="text-center main-title">
                                        @if (m.IsFirstPlayerKnown)
                                        {
                                            <h4>
                                                @m.FirstPlayer
                                            </h4>
                                        }
                                        else if (m.IsRoot || !String.IsNullOrEmpty(m.FirstPlayer))
                                        {
                                            <h4>
                                                @(@m.FirstPlayer)
                                            </h4>
                                        }
                                        else
                                        {
                                            if (m.Bracket != null)
                                            {
                                                @*TODO: change this logic according to the changes*@
                                                @*<a href="@Url.Action("PotentialTeams", "LeagueTable", new {id = m.Bracket.Id, index = m.IndexInBracket % 2 == 0 ? 1 : 2})"
                                                    data-target="#barcket-potential-teams"
                                                    data-toggle="modal"
                                                    class="main-title">@m.HomeTeam</a>*@
                                            }
                                        }
                                    </td>
                                    <td class="text-center result">
                                        @m.FirstPlayerScore
                                    </td>
                                    <td class="text-center result">
                                        @m.SecondPlayerScore
                                    </td>
                                    <td class="text-center main-title">
                                        @if (m.IsSecondPlayerKnown)
                                        {
                                            <h4>
                                                @m.SecondPlayer
                                            </h4>
                                        }
                                        else if (m.IsRoot || !String.IsNullOrEmpty(m.SecondPlayer))
                                        {
                                            <h4>
                                                @(@m.SecondPlayer)
                                            </h4>
                                        }
                                        else
                                        {
                                            @*TODO: change this logic according to the changes*@
                                            @*if (m.Bracket != null)
                                                {
                                                    <a href="@Url.Action("PotentialTeams", "LeagueTable", new {id = m.Bracket.Id, index = m.IndexInBracket % 2 == 0 ? 2 : 1})"
                                                       data-target="#barcket-potential-teams"
                                                       data-toggle="modal"
                                                       class="main-title">@m.GuestTeam</a>
                                                }*@
                                        }
                                    </td>
                                    <td class="text-center">
                                        @ShowImage(m.SecondPlayerImage)
                                    </td>
                                    <td class="text-left">
                                        <a href="@Url.Action("CompetitionGameSets", new { id = m.CycleId })" class="btn btn-danger main-btn" data-target="#resbox" data-toggle="modal">@Messages.ToGame</a>
                                    </td>
                                </tr>
                            }
                            if ((group.GameTypeId == GameTypeId.Playoff || group.GameTypeId == GameTypeId.Knockout34Consolences1Round) && stageIndex > 0 && itmCount == 0)
                            {
                                if (currentSwapIndex == maxSwapIndex)
                                {
                                    if (currentRound == rounds)
                                    {
                                        stgIndex++;
                                        currentRound = 1;
                                    }
                                    else
                                    {
                                        currentRound++;
                                    }

                                    maxItemsForThisStage = teamNumbers.GetStageTotalMatchesPerRow(stgIndex);
                                    maxSwapIndex = teamNumbers.MaxSwapIndexForStage(stgIndex);
                                    currentSwapIndex = 1;
                                }
                                else if (currentSwapIndex < maxSwapIndex)
                                {
                                    currentSwapIndex++;
                                }
                                itmCount = maxItemsForThisStage;
                            }
                        }
                    }
                </tbody>

            </table>
        </div>
    }
}

@section scripts
{
    <script src="~/Scripts/App/PrintSchedule.js"></script>
    <script src="~/Scripts/bracketsmodified.js"></script>
    <script src="~/Content/app/schedulesForCompetitionCtrl.js"></script>
    <script>
        $(document).ready(function () {
            @{
                var index = 0;
            }
            @foreach (var brItem in stBracketsData)
            {
                @:schedulesForCompetitionCtrl.fillBrackets('@brItem.elementWinnerId', '@brItem.elementLoserId', @Html.Raw(Json.Encode(brItem.stages)), @brItem.rounds,false,@index);
                index += 1;
            }
        });
    </script>
}

<div class="modal fade" id="resbox" tabindex="-1" role="dialog">
</div>

@helper ShowImage(string imgName)
{
    string imgSrc = "";
    if (!string.IsNullOrEmpty(imgName))
    {
        imgSrc = String.Concat(ConfigurationManager.AppSettings["SiteUrl"], "/assets/players/" + imgName);
    }
    else
    {
        imgSrc = Url.Content("~/content/img/fan-default.jpg");
    }
    <img src="@imgSrc" class="img-circle" alt="" />
}

<div class="modal fade" id="barcket-potential-teams" tabindex="-1" role="dialog">
</div>
